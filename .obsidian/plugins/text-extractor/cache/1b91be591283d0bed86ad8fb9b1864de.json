{"path":"Samsung RandD/media/Punch-In_Out.pdf","text":"HackerRank | Prepare Certify Compete Apply Search   1  All Contests SRBD Code Contest - 2024 (Round 2) Punch-In/Out  Punch-In/Out locked Problem Submissions Discussions Time Limit: ++ Memory Limit: In FRBD (Fun Research & Development Institute Bangladesh), employees follow a complex but fun oﬃce in-out system. An employee starts the oﬃce with the ﬁrst punch-in through the system and ends the oﬃce with the last punch-out. During the day, an employee can punch in or out an unlimited number of times. The employee is inside the oﬃce after a punch-in until the next punch-out. This time is measured as . The total duration while the employee is inside the oﬃce is known as the Working Hour . Note that, there are some special times when does not count even if the employee is inside that are described later. The Working Day is a metric that is measured based on and some in-out system rules, then assigned to the employee on that day. Possible values of are - \"Overtime\", \"Full Day\", \"1st Half \", \"2nd Half \" and \"Absent\". Firstly, there are some hourly requirements for the values of . Overtime: hours. Full Day: hours. 1st or 2nd Half: hours. (2nd Half is only consider ed when 1st half is not applicable) The punch system is as followed. Employees can punch in or out between to . It's not possible to punch in and out simultaneously at the same minute. Punch out at is a special case, considered the last punch of the previous day. (see sample for more clarity) The working hour is calculated with these rules. count starts from , even if there are earlier punches. The ﬁrst punch-in of the day after loses the 1st Half (along with Overtime or Full Day): does not start count until the 2nd Half starts from . The lunch hour is from to and does not count during this time. An employee will be considered Absent if any of the following is true: The ﬁrst punch-in of the day is after hours or there is no punches throughout the day None of the other values of Working Day is possible Finally, the special Late case is applicable when the employee is not Absent: For Full Day, 1st Half or Overtime: The ﬁrst punch-in of the day after causes Late. For 2nd Half : The ﬁrst punch-in of the day after causes the Late.  Now, your task is to determine the Working Day based on the in-out system rules mentioned above. Input Format Input starts with an integer , denoting the number of test cases. Each case contains a non-negative integer , denoting the number of punch-in or out on a single day. Each of the following lines contains a space-separated special character '>' or '<', and a timestamp in format. '>' denotes the punch-in and '<' denotes the punch-out. The ﬁrst input is punch-in and the last input is punch-out. Punch-in and punch-out inputs are given alternatingly and chronologically. Please check the samples for a better understanding. Constraints Output Format For each case, print the value of . Add a space-separated special character '~' at the end of (except for \"Absent\"), in case of Late. Please check the samples for a better understanding. Sample Input 0 5 2 > 00:00 < 00:00 4 > 11:00 < 13:30 > 14:00 < 19:30 4 > 07:00 < 07:01 > 14:00 < 22:00 2 > 11:30 < 00:00 2 > 15:30 < 19:30 Sample Output 0 Overtime 1st Half ~ Full Day 2nd Half Absent Submissions: 26 Max Score: 100    Interview Prep | Blog | Scoring | Environment | FAQ | About Us | Support | Careers | Terms Of Service | Privacy Policy | Rate This Challenge: More      Test against custom input  ⚙C  Line: 1 Col: 1 Run Code Submit CodeUpload Code as File #include <math.h> #include <stdio.h> #include <string.h> #include <stdlib.h> #include <assert.h> #include <limits.h> #include <stdbool.h> int main() {    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    return 0; } 1 ▾ 23456789 ▾ 1 0 ▾ 1 1 1 2","libVersion":"0.3.2","langs":""}